plugins {
    id 'uk.badamson.mc.web.java-conventions'
    id 'com.netflix.nebula.deb' version '11.3.0'

}

apply plugin: 'com.netflix.nebula.deb'

description = 'MC-database'
def dockerImage = "benedictadamson/mc-database:${project.version}"


tasks.register('packageDeb', Deb) {
    group = 'Publishing'
    packageName = 'missioncommand-db'
    version = (project.version as String).replace('-SNAPSHOT', '')
    release = 1
    priority = 'optional'
    maintainer = 'Benedict Adamson <badamson@spamcop.net>'
    description = 'database of the MC game server'
    distribution = 'stable'

    preInstall file('src/deb/control/preinst')
    postInstall file('src/deb/control/postinst')
    preUninstall file('src/deb/control/prerm')

    requires('mongodb-org-server')

    into '/usr/share/missioncommand-db'

    from('src/main/resources/init-mc') {
        into 'bin'
        fileMode 0755
    }
    from('src/main/resources/init-mc-admin') {
        into 'bin'
        fileMode 0755
    }
    from('src/main/resources/init-mc-db') {
        into 'bin'
        fileMode 0755
    }
    from('src/main/resources/init-mc-user') {
        into 'bin'
        fileMode 0755
    }
    from('src/main/resources/mongodb-admin-psswd.secret') {
        into '/etc/mission-command'
        fileType CONFIG
        fileMode 0600
    }
    from('src/main/resources/mongodb-mc-psswd.secret') {
        into '/etc/mission-command'
        fileType CONFIG
        fileMode 0600
    }
}

tasks.register('prepareDbDockerBuildContext', Copy) {
    group = 'Publishing'
    dependsOn ':MC-database:packageDeb'
    from 'src/main/docker/Dockerfile'
    from(packageDeb.outputs.files) {
        include '*.deb'
        rename 'missioncommand-db_.*_all.deb', 'missioncommand-db.deb'
    }
    into "${project.buildDir}/docker/context"
}
tasks.register('buildDbDockerImage', Exec) {
    group = 'Publishing'
    dependsOn ':MC-database:prepareDbDockerBuildContext'
    commandLine 'docker', 'build', '--tag', dockerImage, "${project.buildDir}/docker/context"
}
tasks.register('pushDbDockerImage', Exec) {
    group = 'Publishing'
    dependsOn ':MC-database:buildDbDockerImage'
    dependsOn 'loginDockerHub'
    commandLine 'docker', 'image', 'push', dockerImage
}

rootProject.buildDockerImages.dependsOn buildDbDockerImage
rootProject.pushDockerImages.dependsOn pushDbDockerImage

