<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>uk.badamson.mc</groupId>
		<artifactId>MC</artifactId>
		<version>2.5.1-SNAPSHOT</version>
	</parent>
	<artifactId>MC-integration</artifactId>
	<packaging>helm</packaging>
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.kiwigrid</groupId>
										<artifactId>
											helm-maven-plugin
										</artifactId>
										<versionRange>
											[5.5,)
										</versionRange>
										<goals>
											<goal>init</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>com.kiwigrid</groupId>
				<artifactId>helm-maven-plugin</artifactId>
				<extensions>true</extensions> <!-- Allow POM to have helm packaging -->
				<configuration>
					<chartDirectory>${project.basedir}/src/main/helm</chartDirectory>
					<chartVersion>${project.version}</chartVersion>
					<useLocalHelmBinary>true</useLocalHelmBinary>
					<uploadRepoStable>
						<name>stable-helm-repo</name>
						<url>http://localhost:8082/api/charts</url>
						<type>CHARTMUSEUM</type>
					</uploadRepoStable>
					<uploadRepoSnapshot>
						<name>snapshot-helm-repo</name>
						<url>http://localhost:8082/api/charts</url>
						<type>CHARTMUSEUM</type>
					</uploadRepoSnapshot>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<executions>
					<!-- Must explicitly bind this goal because the module uses pom packaging 
						rather than jar packaging. -->
					<execution>
						<phase>test-compile</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<rulesets>
						<ruleset>src/test/resources/pmd-ruleset.xml</ruleset>
					</rulesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<!-- Must explicitly bind this goal because the module uses pom packaging 
						rather than jar packaging. -->
					<execution>
						<phase>process-test-resources</phase>
						<goals>
							<goal>testResources</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- For running tests that do not need external (Maven controlled) setup 
					and tear-down steps. This project uses the plugin to run integration tests 
					that use Testcontainers. These tests use Docker images of the components 
					of MC, which the other modules should have build during the package phase. -->
				<executions>
					<execution>
						<id>JUnit-integration-test</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<includes>
								<include>**/*IT.java</include>
							</includes>
							<excludes>
								<include>**/Abstract*.java</include>
							</excludes>
							<!-- Work around OpenJDK bug: -->
							<useSystemClassLoader>false</useSystemClassLoader>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
			</plugin>
		</plugins>
	</reporting>
	<dependencies>
		<dependency>
			<groupId>uk.badamson.mc</groupId>
			<artifactId>MC-back-end</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		<dependency>
			<groupId>uk.badamson.mc</groupId>
			<artifactId>MC-database</artifactId>
			<type>pom</type>
			<version>${project.parent.version}</version>
		</dependency>
		<dependency>
			<groupId>uk.badamson.mc</groupId>
			<artifactId>MC-front-end</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		<dependency>
			<groupId>uk.badamson.mc</groupId>
			<artifactId>MC-model</artifactId>
			<version>${project.parent.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Third-party dependencies: -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.spotbugs</groupId>
			<artifactId>spotbugs-annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Enables Surefire to run JUnit 5 tests -->
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-console</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Do not depend on junit-platform-runner. It is for JUnit 4 tests; if 
			it is in the classpath, the Surefire plugin will think we want to run onlt 
			JUnit 4 tests, and will therefore ignore all the JUnit 5 tests. -->
		<dependency>
			<groupId>org.opentest4j</groupId>
			<artifactId>opentest4j</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongodb-driver-sync</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>