plugins {
    id 'uk.badamson.mc.web.java-conventions'
    id 'groovy'
    id 'com.github.spotbugs' version '5.0.14'
    id 'pmd'
}

def mcBackendVersion = libs.versions.mc.backend.get()
def mcFrontendVersion = libs.versions.mc.frontend.get()
dependencies {
    testImplementation project(':MC-database')
    testImplementation "uk.badamson.mc:MC-front-end:${mcFrontendVersion}:client"
    testImplementation libs.mc.model
    testImplementation libs.mc.rest

    testImplementation libs.logback.classic
    testImplementation libs.logback.core
    testImplementation libs.jackson.datatype.jdk8
    testImplementation libs.spotbugs
    testImplementation libs.reactor.netty
    testImplementation libs.annotation.api
    testImplementation libs.groovy
    testImplementation libs.hamcrest
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter.engine
    testImplementation libs.junit.platform.console
    testImplementation libs.opentest4j
    testImplementation libs.mockserver.client.java
    testImplementation libs.mongodb.driver.sync
    testImplementation libs.selenium.firefox.driver
    testImplementation libs.selenium.remote.driver
    testImplementation libs.selenium.support
    testImplementation libs.spock.core
    testImplementation libs.spring.webflux
    testImplementation libs.spring.test
    testImplementation libs.testcontainers.junit
    testImplementation libs.testcontainers.mockserver
    testImplementation libs.testcontainers.selenium
    testImplementation libs.testcontainers.spock
}

description = 'MC-integration'

java {
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

spotbugs {
    effort = 'Max'
    reportLevel = 'Low'
    excludeFilter = file('src/test/resources/spotbugs-exclude.xml')
}

pmd {
    ruleSetConfig = resources.text.fromFile('src/test/resources/pmd-ruleset.xml')
}

processTestResources {
    exclude 'application.properties'
}
tasks.register('processTestApplicationProperties', Copy) {
    from 'src/test/resources'
    into project.buildDir.toPath().resolve('classes/java/test')
    include 'application.properties'
    expand(
            projectVersion: project.version,
            backendVersion: mcBackendVersion,
            frontendVersion: mcFrontendVersion
    )
}
processTestResources.dependsOn processTestApplicationProperties
compileTestGroovy.dependsOn processTestApplicationProperties
test.dependsOn ':MC-database:buildDbDockerImage'
